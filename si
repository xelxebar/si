#!/usr/bin/env bash

# MIT License
# 
# Copyright (c) 2016 Brandon Wilson
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

SI_HOME=${SI_HOME:-$(dirname $(which $0))/../share/si}
. "${SI_HOME}/default.config"

SI_CONFIG=${SI_CONFIG:-${path[config]}}
[[ -f "${SI_CONFIG}" ]] && . "${SI_CONFIG}"



### ui {{{1

function ui_create_layout {
	local -n layout=${1}

	layout[output-pane]=$(\tmux display-message -p '#{pane_id}')
	\tmux split-window -v -l ${size[input-pane]}
	layout[input-pane]=$(\tmux display-message -p '#{pane_id}')
}

function ui_colorizer {
	local regex=${1}
	local color=${2}

	local cmd=""

	cmd+="LC_ALL=C GREP_COLORS='mt=38;5;${color}' "
	cmd+="\egrep --color=always --line-buffered '${regex}|$'"

	echo ${cmd}
}

function ui_line_stripper {
	local regex=${1}

	echo "\egrep --invert-match --line-buffered '${regex}'"
}

function ui_ignores_cmd {
	local key=""
	local cmd=""

	for key in "${ignores[@]}"; do
		local regex=$(eval echo "\"${key}\"")
		cmd+=" | "$(ui_line_stripper "${regex}")
	done

	echo ${cmd# | }
}

function ui_colorize_cmd {
	local i=0
	local cmd=""

	for i in $(seq 0 2 $((${#color[@]}-1))); do
		local key=${color[$i]}
		local regex=$(eval echo "\"${key}\"")
		local cnum=${color[$(($i+1))]}
		cmd+=" | "$(ui_colorizer "${regex}" "${cnum}")
	done

	echo ${cmd# | }
}

function ui_init_output {
	local basedir=${1}
	local self=${2}
	local tmux_pane=${3}

	local out=${basedir}/out
	local cmd="tail --follow --lines=${size[output-buffer]} ${out}"
	cmd+=" | "$(ui_ignores_cmd)
	cmd+=" | "$(ui_colorize_cmd)

	\tmux respawn-pane -k -t ${tmux_pane} "${cmd}"
}

function ui_init_input {
	local basedir=${1}
	local tmux_pane=${2}

	local in=${basedir}/in
	local vimrc=${path[vimrc]}
	local vim_infile_var="g:si_infile"

	\tmux respawn-pane -k -t ${tmux_pane}                    \
	                   \vim -u "${vimrc}"                    \
	                   --cmd "let ${vim_infile_var}='${in}'" \
	                   -c "startinsert"
}

function ui_set_title {
	local window=${1}
	local network=${2}
	local target=${3}
	local prefix=${format[window-name-prefix]}
	local sep=${format[window-name-separator]}
	local cur=$(tmux display-message -p '#{window_name}')
	local new=${target:-${network}}
	local name=""

	[[ "${cur##${prefix}}" = "${cur}" ]] && name=${prefix}${new} \
	                                     || name=${cur}${sep}${new}

	\tmux rename-window "${name}"
	\tmux set-window-option -t "${window}" automatic-rename off
}

function ui_init {
	local basedir=${1}
	local network=${2}
	local target=${3}
	local nick=${4}

	local tmux_session=$(\tmux display-message -p '#{session_id}')
	local tmux_window=$(\tmux display-message -p '#{window_id}')
	local -A tmux_layout=(
		[output-pane]=""
		[input-pane]=""
	)

	ui_set_title "${tmux_window}" "${network}" "${target}"
	ui_create_layout tmux_layout
	ui_init_input "${basedir}" "${tmux_layout[input-pane]}"
	ui_init_output "${basedir}" "${nick}" ${tmux_layout[output-pane]}
}


function ui_view {
	local network=${1}
	local target=${2}
	local uri=${server[${network}]}

	local basedir=${path[prefix]}/${uri}/${target}
	local nick=${nick[${network}]}

	if  ! [[ "${basedir}" -ef "${path[prefix]}" ]] \
	   && [[ -d "${basedir}" ]]; then
		ui_init "${basedir}" "${network}" "${target}" "${nick}"
	fi
}

function ui_set_trigger {
	local callback=${1}
	local trigger=${2}
	local network=${3}
	local target=${4}

	local uri=${server[${network}]}
	local nick=${nick[${network}]}
	local file=${path[prefix]}/${uri}/${target}/out

	local regex=$(eval echo "\"${trigger}\"")
	local cmd="tail --lines=1 '${file}'"
	cmd+=" | "$(ui_ignores_cmd)

	while \inotifywait --event modify       \
	                   --outfile /dev/null  \
			   --syslog             \
			   "${file}"; do
		local msg=$(eval "${cmd}")
		local match=$(echo "${msg}" | \egrep --only-matching "${regex}")

		[[ -n "${match}" ]] && ${callback} "${network}" \
		                                   "${target}"  \
		                                   "${msg}"     \
		                                   "${match}"
	done
}

# TODO: Fix erroneous pathname expansion
function ui_watch {
	local network=${1}
	local target=${2}
	local uri=${server[${network}]}
	local pidfile=${path[prefix]}/${uri}/${target}/${filename[watch-pids]}

	local i=0
	for i in $(seq 0 2 $((${#triggers[@]}-1))); do
		local trigger=${triggers[$i]}
		local callback=${triggers[$(($i+1))]}
		ui_set_trigger "${callback}" "${trigger}" \
		               "${network}" "${target}" &
		echo "$!" >> "${pidfile}"
	done
}

function ui_unwatch {
	local network=${1}
	local target=${2}
	local uri=${server[${network}]}
	local pidfile=${path[prefix]}/${uri}/${target}/${filename[watch-pids]}

	local pid=""
	while IFS= read -r pid; do
		kill "${pid}" $(pgrep --parent "${pid}")
	done < "${pidfile}"

	rm "${pidfile}"
}

### connect {{{1

function io_basedir {
	local network=${1}

	echo ${path[prefix]}/${server["${network}"]}
}

function io_pidfile {
	local network=${1}

	echo $(io_basedir "${network}")/"${filename[connection-pid]}"
}

function io_isidentreq {
	local msg=${1}

	local regex='This nickname is registered. Please choose a different '
	regex+='nickname, or identify via /msg NickServ identify '
	regex+='<password>.'

	return $(echo "${msg}" | \egrep --quiet "${regex}")
}

function io_isnewmsg {
	local cmpdate=${1}
	local msg=${2}

	local msgdate=$(echo "${msg}" | \
	                \egrep --only-matching "^${regex_date}" | \
	                date +%s)
	
	return $([[ ${msgdate} -gt ${cmpdate} ]])
}

function io_sendidentreq {
	local reqdate=${1}
	local network=${2}
	local nick=${3}

	local basedir=$(io_basedir "${network}")
	local nickserv=${basedir}/nickserv/
	local out=${basedir}/nickserv/out
	local in=${basedir}/nickserv/in
	local msg=$(tail --lines=1 "${out}")

	if    $(io_isnewmsg "${reqdate}" "${msg}") \
	   && $(io_isidentreq "${msg}"); then
		local pass=$(${password[${network}]})
		return $(echo "identify ${pass}" > "${in}")
	else
		return 1
	fi
}

function io_identifynick {
	local network=${1}

	local nick=${nick[${network}]}
	local reqdate=$(date +%s)
	local basedir=$(io_basedir "${network}")
	local nickserv=${basedir}/nickserv/
	local out=${basedir}/nickserv/out

	if    [[ -d "${nickserv}" ]]                               \
	   && \inotifywait --event modify                          \
	                   --outfile /dev/null                     \
			   --syslog                                \
	                   --timeout ${timeout[nick-registration]} \
	                   "${out}"; then
		io_sendidentreq "${reqdate}" "${network}" || \
			${FUNCNAME} "${network}"
	elif !  [[ -d "${nickserv}" ]]                               \
	     && \inotifywait --event modify                          \
	                     --outfile /dev/null                     \
	          	     --syslog                                \
	                     --timeout ${timeout[nick-registration]} \
	                       "${basedir}"; then
		${FUNCNAME} "${network}"
	else
		>&2 echo "!! Failed to identify ${nick} with ${network}"
	fi
}

function io_startconn {
	local network=${1}

	local uri=${server[${network}]}
	local nick=${nick[${network}]}
	local pass=${passwords[${network}]}
	local pidfile=$(io_pidfile ${network})

	export IIPASS=${pass}
	\ii -i "${path[prefix]}" -s "${uri}" -n "${nick}" -k IIPASS &
	echo "$!" > "${pidfile}"
}

function io_runhook {
	local hook_fn=${1}

	${hook_fn}
}

function io_connect {
	local -a networks=("${@}")
	
	local network=""
	for network in "${networks[@]}"; do
		io_startconn "${network}"
		io_identifynick "${network}"
		io_runhook "${connecthook[${network}]}"
	done
}

function io_disconnect {
	local -a networks=("${@}")

	local network=""
	for network in "${networks[@]}"; do
		local pidfile=$(io_pidfile ${network})

		\kill $(cat "${pidfile}")
		rm "${pidfile}"
	done
}


### cli {{{1

function cli_conn_open {
	local pid=${1}
	return $([[ $(ps --format ucmd --no-headers "${pid}") = "ii" ]])
}

function cli_conns {
	local pidfile=""

	\find "${path[prefix]}" -name "${filename[connection-pid]}" | \
	while IFS= read -r pidfile; do
		local pid=$(cat "${pidfile}")
		local uri=$(\dirname "${pidfile}" | \xargs basename)

		if $(cli_conn_open "${pid}"); then
			echo "${uri}"
		fi
	done
}

function cli_status {
	local uri=""
	cli_conns | while IFS= read -r uri; do
		echo -e "${uri}: open"
	done
}

function cli_help {
	cat <<- EOF
	Usage: $(basename "${0}") <command> [args]
	
	Commands:
	    connect <network>            connect to network

	    disconnect <network>         disconnect from network

	    view <network> [target]      view i/o for target channel/pm

	    watch <network> [target]     watch triggers on target

	    unwatch <network> [target]   remove watch triggers on target

	    status                       show connection status
	EOF
}

### }}}


function main {
	declare command=${1}; shift
	declare args=(${@})

	case "${command}" in
		connect)    io_connect "${args[@]}";;
		disconnect) io_disconnect "${args[@]}";;
		view)       ui_view "${args[@]}";;
		watch)      ui_watch "${args[@]}";;
		unwatch)    ui_unwatch "${args[@]}";;
		status)     cli_status "${args[@]}";;
		*)          cli_help;;
	esac
}

main "${@}"


# vim: set foldmethod=marker :
