#!/usr/bin/env bash

# MIT License
# 
# Copyright (c) 2016 Brandon Wilson
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

SI_HOME=${SI_HOME:-$(dirname $(which $0))/../share/si}
. "${SI_HOME}/default.config"

SI_CONFIG=${SI_CONFIG:-${path[config]}}
[[ -f "${SI_CONFIG}" ]] && . "${SI_CONFIG}"



### regex {{{1

declare regex_special="][\`_^{|}"

declare regex_date='([0-9]{4}-[0-1][0-9]-[0-3][0-9] [0-2][0-9]:[0-9]{2})'
declare regex_nick="([${regex_special}[:alnum:]][${regex_special}[:alnum:]-]*)"

declare regex_ip4addr="([[:digit:]]{1,3}(\.[[:digit:]]{1,3}){3})"
declare regex_ip6addr="(([[:xdigit:]]{1,4}|:)(:[[:xdigit:]]{1,4}|:){1,7})"

declare regex_shortname="([[:alnum:]._-]*)"
declare regex_hostname="(${regex_shortname}(\.${regex_shortname})*"
        regex_hostname+="(/${regex_shortname})*)"
declare regex_hostaddr="(${regex_ipv4addr}|${regex_ip6addr})"
declare regex_host="(${regex_hostname}|${regex_hostaddr})"

declare regex_id="(${regex_shortname}@${regex_host})"


function regex_status_change {
	local status=${1}

	echo "^${regex_date} -!- ${regex_nick}(\(~?${regex_id}\))? ${status}"
}


### ui {{{1

function ui_create_layout {
	local -n layout=${1}

	layout[output-pane]=$(\tmux display-message -p '#{pane_id}')
	\tmux split-window -v -l ${size[input-pane]}
	layout[input-pane]=$(\tmux display-message -p '#{pane_id}')
}

function ui_colorizer {
	local regex=${1}
	local color=${2}

	local cmd=""

	cmd+="GREP_COLORS='mt=38;5;${color}' "
	cmd+="\egrep --color=always --line-buffered '${regex}|$'"

	echo ${cmd}
}

function ui_line_stripper {
	local regex=${1}

	echo "\egrep --invert-match --line-buffered '${regex}'"
}

function ui_init_output {
	local basedir=${1}
	local self=${2}
	local tmux_pane=${3}

	local out=${basedir}/out
	local regex_join=$(regex_status_change "has joined")
	local regex_part=$(regex_status_change "has left")
	local regex_quit=$(regex_status_change "has quit")
	local regex_chnick=$(regex_status_change "changed nick to")

	local cmd="tail --follow --lines=${size[output-buffer]} ${out}"
	cmd+="|"$(ui_line_stripper "${regex_join}")
	cmd+="|"$(ui_line_stripper "${regex_part}")
	cmd+="|"$(ui_line_stripper "${regex_quit}")
	cmd+="|"$(ui_line_stripper "${regex_chnick}")
	cmd+="|"$(ui_colorizer "^${regex_date}" "${color[date]}")
	cmd+="|"$(ui_colorizer "<${regex_nick}>" "${color[nick]}")
	cmd+="|"$(ui_colorizer "<?${self}>?" "${color[self]}")

	\tmux respawn-pane -k -t ${tmux_pane} "${cmd}"
}

function ui_init_input {
	local basedir=${1}
	local tmux_pane=${2}

	local in=${basedir}/in
	local vimrc=${path[vimrc]}
	local vim_infile_var="g:si_infile"

	\tmux respawn-pane -k -t ${tmux_pane}                    \
	                   \vim -u "${vimrc}"                    \
	                   --cmd "let ${vim_infile_var}='${in}'" \
	                   -c "startinsert"
}

function ui_set_title {
	local window=${1}
	local network=${2}
	local target=${3}
	local prefix=${format[window-name-prefix]}
	local sep=${format[window-name-separator]}
	local cur=$(tmux display-message -p '#{window_name}')
	local new=${target:-${network}}
	local name=""

	[[ "${cur##${prefix}}" = "${cur}" ]] && name=${prefix}${new} \
	                                     || name=${cur}${sep}${new}

	\tmux rename-window "${name}"
	\tmux set-window-option -t "${window}" automatic-rename off
}

function ui_init {
	local basedir=${1}
	local network=${2}
	local target=${3}
	local handle=${4}

	local tmux_session=$(\tmux display-message -p '#{session_id}')
	local tmux_window=$(\tmux display-message -p '#{window_id}')
	local -A tmux_layout=(
		[output-pane]=""
		[input-pane]=""
	)

	ui_set_title "${tmux_window}" "${network}" "${target}"
	ui_create_layout tmux_layout
	ui_init_input "${basedir}" "${tmux_layout[input-pane]}"
	ui_init_output "${basedir}" "${handle}" ${tmux_layout[output-pane]}
}


function ui_view {
	local network=${1}
	local uri=${server[${network}]}
	local target=${2}

	local basedir=${path[prefix]}/${uri}/${target}
	local handle=${nick[${network}]}

	if  ! [[ "${basedir}" -ef "${path[prefix]}" ]] \
	   && [[ -d "${basedir}" ]]; then
		ui_init "${basedir}" "${network}" "${target}" "${handle}"
	fi
}


### connect {{{1

function io_basedir {
	local network=${1}

	echo ${path[prefix]}/${server["${network}"]}
}

function io_pidfile {
	local network=${1}

	echo $(io_basedir "${network}")/pid
}

function io_isidentreq {
	local msg=${1}

	local regex='This nickname is registered. Please choose a different '
	regex+='nickname, or identify via /msg NickServ identify '
	regex+='<password>.'

	return $(echo "${msg}" | \egrep --quiet "${regex}")
}

function io_isnewmsg {
	local cmpdate=${1}
	local msg=${2}

	local msgdate=$(echo "${msg}" | \
	                \egrep --only-matching "^${regex_date}" | \
	                date +%s)
	
	return $([[ ${msgdate} -gt ${cmpdate} ]])
}

function io_cn2rpath {
	local name=${1}

	local -a dirs=(${name//./ })
	local rpath=""

	local i=${#dirs[@]}
	for i in $(seq $(($i-1)) -1 0); do
		rpath+=${dirs[$i]}/
	done

	echo ${rpath#/}
}

function io_sendidentreq {
	local reqdate=${1}
	local network=${2}
	local handle=${3}

	local basedir=$(io_basedir "${network}")
	local nickserv=${basedir}/nickserv/
	local out=${basedir}/nickserv/out
	local in=${basedir}/nickserv/in
	local uri=${server[${network}]}
	local msg=$(tail --lines=1 "${out}")

	if    $(io_isnewmsg "${reqdate}" "${msg}") \
	   && $(io_isidentreq "${msg}"); then
		local passid=$(io_cn2rpath "${uri}")/${handle}
		local pass=$(\pass "${passid}")
		local ident="identify ${pass}"
		
		return $(echo "${ident}" > "${in}")
	else
		return 1
	fi
}

function io_identifynick {
	local network=${1}

	local handle=${nick[${network}]}
	local reqdate=$(date +%s)
	local basedir=$(io_basedir "${network}")
	local nickserv=${basedir}/nickserv/
	local out=${basedir}/nickserv/out

	if    [[ -d "${nickserv}" ]]                                 \
	   && $(\inotifywait --timeout ${timeout[nick-registration]} \
	                  --event modify                             \
	                  --outfile "${nickserv}/inotifywait.log"    \
	                  "${out}"); then
		io_sendidentreq "${reqdate}" "${network}" "${handle}" || \
			${FUNCNAME} "${network}"
	elif !  [[ -d "${nickserv}" ]] \
	     && $(\inotifywait --timeout ${timeout[nick-registration]} \
	                       --event create                          \
	                       --outfile "${basedir}/inotifywait.log"  \
	                       "${basedir}"); then
		${FUNCNAME} "${network}"
	else
		>&2 echo "!! Failed to identify ${handle} with ${network}"
	fi
}

function io_startconn {
	local network=${1}

	local uri=${server[${network}]}
	local handle=${nick[${network}]}
	local pass=${passwords[${network}]}
	local pidfile=$(io_pidfile ${network})

	export IIPASS=${pass}
	\ii -i "${path[prefix]}" -s "${uri}" -n "${handle}" -k IIPASS &
	echo "$!" > "${pidfile}"
}

function io_runhook {
	local hook_fn=${1}

	${hook_fn}
}

function io_connect {
	local -a networks=("${@}")
	
	local network=""
	for network in "${networks[@]}"; do
		io_startconn "${network}"
		io_identifynick "${network}"
		io_runhook "${connecthook[${network}]}"
	done
}

function io_disconnect {
	local -a networks=("${@}")

	local network=""
	for network in "${networks[@]}"; do
		local pidfile=$(io_pidfile ${network})

		\kill $(cat "${pidfile}")
		rm "${pidfile}"
	done
}


### cli {{{1

function cli_help {
	cat <<- EOF
	Usage: $(basename "${0}") <command> [args]
	
	Commands:
	    connect <network>          connect to network

	    disconnect <network>       disconnect from network

	    view <network> [target]    view i/o for target channel/pm
EOF
}

### }}}


function main {
	declare command=${1}; shift
	declare args=(${@})

	case "${command}" in
		connect)    io_connect "${args[@]}";;
		disconnect) io_disconnect "${args[@]}";;
		view)       ui_view "${args[@]}";;
		*)          cli_help;;
	esac
}

main "${@}"

#vim: set foldmethod=marker :
